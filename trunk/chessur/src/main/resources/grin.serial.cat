#-------------------------------------------------------------------------------
# Copyright (c) 2011 Michael Doberenz.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
# 
# Contributors:
#     Michael Doberenz - initial API and implementation
#-------------------------------------------------------------------------------
alias java.lang.Boolean as Boolean
alias java.lang.Character as Character
alias java.lang.Object.equals as eq
alias org.fuwjin.chessur.Module as Module
alias org.fuwjin.chessur.expression.AbortStatement as AbortStatement
alias org.fuwjin.chessur.expression.Assignment as Assignment
alias org.fuwjin.chessur.expression.Block as Block
alias org.fuwjin.chessur.expression.CouldStatement as CouldStatement
alias org.fuwjin.chessur.expression.Declaration as Declaration
alias org.fuwjin.chessur.expression.EitherOrStatement as EitherOrStatement
alias org.fuwjin.chessur.expression.Filter as Filter
alias org.fuwjin.chessur.expression.FilterAcceptStatement as FilterAcceptStatement
alias org.fuwjin.chessur.expression.CatalogImpl as Catalog
alias org.fuwjin.chessur.expression.Invocation as Invocation
alias org.fuwjin.chessur.expression.IsStatement as IsStatement
alias org.fuwjin.chessur.expression.Literal as Literal
alias org.fuwjin.chessur.expression.CompositeLiteral as CompositeLiteral
alias org.fuwjin.chessur.expression.PublishStatement as PublishStatement
alias org.fuwjin.chessur.expression.RepeatStatement as RepeatStatement
alias org.fuwjin.chessur.Script as Script
alias org.fuwjin.chessur.expression.ScriptImpl as ScriptImpl
alias org.fuwjin.chessur.expression.ValueAcceptStatement as ValueAcceptStatement
alias org.fuwjin.chessur.expression.Variable as Variable
alias org.fuwjin.util.CodePointSet$Range as Range
alias org.fuwjin.util.Indent as Indent
alias java.lang.Iterable.iterator as iterator
alias java.util.Iterator.next as getNext
alias java.util.Iterator.hasNext as hasNext
alias java.util.Map$Entry.getKey as key
alias java.util.Map$Entry.getValue as value

<Catalog>{
  modules = iterator(Catalog.modules(cat))
  could {
    repeat <LoadDeclaration>
    publish '\n'
  }
  is not hasNext(modules)
  aliases = iterator(Catalog.aliases(cat))
  could {
    repeat <AliasDeclaration>
    publish '\n'
  }
  is not hasNext(aliases)
  specs = iterator(Catalog.scripts(cat))
  repeat <ScriptDeclaration>
  is not hasNext(specs)
}
<LoadDeclaration>{
    module = getNext(modules)
    path = Module.source(module)
    name = Module.name(module)
    publish "load 'path' as 'name'\n"
}
<AliasDeclaration>{
    entry = getNext(aliases)
    name = key(entry)
    alias = value(entry)
    publish "alias 'alias' as 'name'\n"
}
<ScriptDeclaration>{
  spec = ScriptImpl.declaration(getNext(specs))
  name = Declaration.name(spec)
  publish "\<'name'> {"
  indent = Indent.new()
  statements = iterator(Declaration.statements(spec))
  could repeat {
    statement = getNext(statements)
    publish "'indent'"
    <Statement>
  }
  is not hasNext(statements)
  could{
    value = Declaration.returns(spec)
    is value
    publish "'indent'return "
    <Value>
  }
  publish "\n}\n"
}

<Value>{
  statement = value
  either <Script>
  or <StaticLiteral>
  or <DynamicLiteral>
  or <AcceptStatement>
  or <Invocation>
  or <Variable>
}
<Statement>{
  either <IsStatement>
  or <EitherOrStatement>
  or <CouldStatement>
  or <RepeatStatement>
  or <AcceptStatement>
  or <PublishStatement>
  or <AbortStatement>
  or <Script>
  or <Block>
  or <Assignment>
  or <Invocation>
}

<IsStatement>{
  is IsStatement.instanceof(statement)
  publish "is "
  could {
    is IsStatement.isNot(statement)
    publish "not "
  }
  value = IsStatement.value(statement)
  either {
    is FilterAcceptStatement.instanceof(value)
    filter = FilterAcceptStatement.filter(value)
    publish "in "
    <Filter>
  } or {
    is ValueAcceptStatement.instanceof(value)
    value = ValueAcceptStatement.value(value)
    is Literal.instanceof(value)
    <Value>
  } or {
    is eq(Variable.NEXT(), value)
    publish "accept "
    <Value>
  } or {
    <Value>
  }
}
<EitherOrStatement>{
  is EitherOrStatement.instanceof(statement)
  stmt = statement
  statements = iterator(EitherOrStatement.statements(stmt))
  publish "either "
  statement = getNext(statements)
  <Statement>
  repeat{
    old = statement
    statement = getNext(statements)
    either {
      is Block.instanceof(old)
      publish ' '
    } or publish indent
    publish "or "
    <Statement>
  }
}
<CouldStatement>{
  is CouldStatement.instanceof(statement)
  stmt = statement
  publish "could "
  statement = CouldStatement.statement(stmt)
  <Statement>
}
<RepeatStatement>{
  is RepeatStatement.instanceof(statement)
  stmt = statement
  publish "repeat "
  statement = RepeatStatement.statement(stmt)
  <Statement>
}
<AcceptStatement>{
  either <FilterAcceptStatement>
  or <ValueAcceptStatement>
}
<ValueAcceptStatement>{
  is ValueAcceptStatement.instanceof(statement)
  publish "accept "
  could {
    is ValueAcceptStatement.isNot(statement)
    publish "not "
  }
  value = ValueAcceptStatement.value(statement)
  <Value>
}
<FilterAcceptStatement>{
  is FilterAcceptStatement.instanceof(statement)
  publish "accept "
  could {
    is FilterAcceptStatement.isNot(statement)
    publish "not "
  }
  publish "in "
  filter = FilterAcceptStatement.filter(statement)
  <Filter>
}
<PublishStatement>{
  is PublishStatement.instanceof(statement)
  publish "publish "
  value = PublishStatement.value(statement)
  <Value>
}
<AbortStatement>{
  is AbortStatement.instanceof(statement)
  publish "abort "
  value = AbortStatement.value(statement)
  <Value>
}
<Block>{
  is Block.instanceof(statement)
  block = statement
  Indent.increase(indent)
  publish "{"
  statements = iterator(Block.statements(block))
  could repeat {
    statement = getNext(statements)
    publish indent
    <Statement>
  }
  is not hasNext(statements)
  Indent.decrease(indent)
  publish indent
  publish "}"
}
<Assignment>{
  is Assignment.instanceof(statement)
  name = Assignment.name(statement)
  publish "'name' = "
  value = Assignment.value(statement)
  <Value>
}
<Invocation>{
  is Invocation.instanceof(statement)
  name = Invocation.name(statement)
  alias = Catalog.encode(cat, name)
  publish "'alias'("
  params = iterator(Invocation.params(statement))
  could {
    value = getNext(params)
    <Value>
    could repeat{
      value = getNext(params)
      publish ", "
      <Value>
    }
  }
  is not hasNext(params)
  publish ")"
}

<Filter>{
  is Filter.instanceof(filter)
  ranges = iterator(Filter.ranges(filter))
  range = getNext(ranges)
  <Range>
  could repeat{
    range = getNext(ranges)
    publish ", "
    <Range>
  }
  is not hasNext(ranges)
}
<Range>{
  is Range.instanceof(range)
  ch = Range.start(range)
  publish Filter.escape(ch)
  could{
    is Range.isRange(range)
    publish '-'
    ch = Range.end(range)
    publish Filter.escape(ch)
  }
}

<StaticLiteral>{
  is Literal.instanceof(value)
  publish '\''
  chars = iterator(Literal.chars(value))
  could repeat{
    ch = getNext(chars)
    publish Literal.escape(ch)
  }
  is not hasNext(chars)
  publish '\''
}
<DynamicLiteral>{
  is CompositeLiteral.instanceof(value)
  composite = value
  publish '"'
  values = iterator(CompositeLiteral.values(composite))
  could repeat{
    value = getNext(values)
    either{
      is Literal.instanceof(value)
      chars = iterator(Literal.chars(value))
      could repeat{
        ch = getNext(chars)
        publish CompositeLiteral.escape(ch)
      }
      is not hasNext(chars)
    }or{
      is Variable.instanceof(value)
      name = Variable.name(value)
      publish "\''name'\'"
    }or{
      <Script>
    }
  }
  is not hasNext(values)
  publish '"'
}

<Script>{
  is Script.instanceof(statement)
  name = Script.name(statement)
  publish "\<'name'\>"
}
<Variable>{
  is Variable.instanceof(value)
  publish Variable.name(value)
}
