#summary Pogo is an attributed PEG (Parsing Expression Grammar) parser and transformation engine for Java.
#labels Featured

= Introduction =

Software projects are littered with one-of parsers, convoluted regex line splitters, log rippers, elaborate code generators, DOM walkers, SAX handlers, etc. Almost every software package reads or writes some sort of formatted text. These parsers are complicated to write and maintain, so instead we opt for a tedious general purpose format such as XML or CSV to avoid the complexity of a full blown domain language.

And for good reason. Writing a grammar for Yacc or Antlr or JavaCC is tough work, prone to subtle yet painful errors, especially when that next new feature requires a full rewrite of the grammar. We need a parser generator for the rest of us.

This is where Pogo steps in. Pogo grammars are simpler to read and write than even regular expressions, and yet are just as powerful for common situations as the big boy grammars. And Pogo doesn't have a model representing the parse, such as an XML DOM. Instead it parses straight into the objects you wanted. 

Unfortunately, Pogo isn't for everyone. If you love left-recursion, limited look-ahead, back-tracking, ambiguous parse trees and the other nonsense complexity that parser parsers have been forcing us to live with for the last 40 years, then you're out of luck. Pogo is for programmers who want to give users a domain language without having to first become language experts.

= Pogo: Under the Hood =

Pogo is an attributed Parsing Expression Grammar (PEG). Parsing Expression Grammars^1^ provide some unique features desirable to parsing when compared to Context-Free Grammars.
 * Composable -- A rule reference may be replaced by its rule definition everywhere in the grammar without changing the grammar.
 * Deterministic -- Every input has a unique unambiguous parse tree.
 * Linear -- The parse can be constructed in O(n) where n is the length of the input.

There are key features which PEG's lack compared to their CFG(Context Free Grammar) counterparts
 * Transparency -- Portions of a PEG rule definition may be completely or partially masked by an earlier portion of the rule.
 * Back-tracking -- A repeated or optional parse won't rewind a successful match even if it would aid subsequent rules in matching.

Simply put, PEGs allow developers to write, test, and refactor grammars much as any other code. 

= Does the world need another Parser Parser? =

Simply, yes. Parsing doesn't have to be so hard. It doesn't have to hurt so much to write. It doesn't need to be so complicated to maintain. Even among the PEG parsers, there is sufficient complexity in the grammar to make it unapproachable to the average programmer. Pogo seeks to be simple first and powerful second.

= What can you do with Pogo? =

The end goal of Pogo is to be a general framework for transformation services. So object hierarchy transformations, data languages, test languages, domain languages, static analysis, code generation, log scraping and data migration are all well within the scope of Pogo's use cases. In addition, as a general purpose parser, we hope to make parsing accessible and usable to people who don't have the privilege of being trained language experts.

 * [ParsingExpressionGrammar The Parsing Expression Grammar]
 * [PogoAttributes What are Attributes?]
 * [PogoApi The Pogo API]
 * [CsvExample The example project]

1. [http://pdos.csail.mit.edu/~baford/packrat/popl04/]