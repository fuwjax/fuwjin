#summary The history of the Fuwjin Suite

The Fuwjin Suite has grown to a library of 3 major components and a half dozen experimental libraries. While almost all of the code has been written by one man, there has been significant involvement in the design and direction of the Suite from countless friends and coworkers. This has always been a community project even if it is only actively maintained by a single developer.

The Fuwjin Suite had its roots in JON, the Java Object Notation library. In 2005, Michael Doberenz was a member of a team faced with developing a product with a large volume of static data. The team was frustrated by the complexity of relational databases, the verbosity of XMLl and the opacity of Java serialization. We wanted something easily readable and writable by both humans and computers. JSON seemed a natural fit, but unfortunately it suffered from three major shortcomings

  # Object graphs are rarely trees, the same object may be referenced several times
  # Java is strongly typed, but JSON carries no type information
  # Maps don't always have strings for keys

This let to the precursor to JON, a set of extensions to JSON that allow serialization to and from plain Java objects. Even several complete rewrites later, JON was still parsed by a handwritten zero-lookahead, top-down parser.

At about the same time, two separate events led to a dramatic shift in JON's design. First was the desire to have forward references, the ability to refer to an object in the JON stream which had not yet been deserialized.The second was the claim and subsequent challenge that the same engine could be used for both serialization and parsing. A little research led to the discovery that the underlying parser/serializer in JON was already very similar to PEG, 

Pogo was an attempt to make the simplest possible attributed PEG parser. Most attributed parsers are trying to define a new language to manage attributes; Pogo simply binds the attributes to Java. This leads to a very simple parser with very elaborate parse handling. Grammars which are impossible in other parser parsers are trivial in Pogo.

However, as the binding grew in complexity, the need became great to refactor the underlying Java reflection into something more manageable. Postage was intended to just be a message parsing framework, but grew into a deeper abstraction, allowing methods, fields, constructors and virtual functions to merge into one common invocation structure mimicking public static functions.

Over the past few years, the Fuwjin Suite has been hosted on assembla,, sourceforge, dreamhost, and now makes its home at googlecode.  It has no runtime dependencies other than Java and is built from and deployed to maven central.