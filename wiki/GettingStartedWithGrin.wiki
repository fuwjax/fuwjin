#summary Getting Started with Grin

=Getting started with Grin=

_"A grin without a cat! It's the most curious thing I ever saw in all my life!"_

Grin represents a fundamental paradigm shift in language design, part string manipulation, part shell scripting language. In a strong sense it's the language born of the same motivation as the original wiki, the simplest possible thing that might just work.

It may shock you just how many features are "missing" from Grin. But hopefully you'll be even more shocked by how much more is possible when starting with so little.

Grin is at it's heart a scripting language. So we'll start with a simple script.
{{{
<HelloWorld> {
  publish "Hello, world!"
}
}}}

Surprise of all surprises... this is the tried and true hello-world script in Grin. The script is named `<HelloWorld>` which may seem awkward at first, but there's a subtle ploy at work here. Script names are "elevated identifiers;" they are intended to be visually distinguishable and distinguished among the various identifiers in Grin. 

By now, curly braces as block delimiters are old hat, but why, you might ask, why would Grin stoop to old hat. The answer should not be surprising. Any restrictions to presentation are better than none, but fewer are better than more. Keep in mind here that presentation is not content, even though some modern languages such as python insist on blurring the line. White space has meaning to people and meaning to computers, but those meanings are rarely the same. So since delimiters are a necessary evil, stick with the least surprising choice.

Next, let's look at the only statement in our `<HelloWorld>` script, starting with the keyword "publish". Publish simply means to pass the following value expression, in this case "Hello, world!" to the script's output stream. Every Grin implementation is expected to provide a script with an input stream and an output stream, generally these default to the standard console input and output. 

There aren't many keywords in Grin, and publish is one of only 7 keywords that can start a statement. We'll bring up the others as we go, but the impatient may detour to the GrinLanguage for more details.

The value expression "Hello, world!" is called a literal, or more specifically a dynamic literal because it is enclosed in double quotes. The alternative is called a static literal, and would be enclosed in single quotes. For example:
{{{
<HelloWorldRedux> {
  publish 'Hello, world!'
}
}}}
In this case, both `<HelloWorld>` and `<HelloWorldRedux>` would publish the same thing to the output stream, but the literals can be used in different ways, as we will see in a bit.

Let's look at getting some input
{{{
<BasicUserInput> {
  accept next
}
}}}

This fairly useless script will consume a single character from the input stream. Now, if there is no next character, for instance if the input stream is empty, this script will fail, which depending on the underlying implementation may be an error code or an exception. But assuming there is a next character, this script will scan it from the input and finish. So here we have 2 keywords, "accept" which instructs the interpreter to read from the input, and "next" which represents the next character in the stream.

Technically next here is used as a filter, there are other possible filter expressions, for instance
{{{
<HexDigit> {
  accept in 0-9, a-f, A-F
}
}}}

Here we have a script which will consume any number, or a case-insensitive A, B, C, D, E, or F. The keyword "in" indicates that there will be a set of ranges making up the filter. Ranges are comma delimited lists of contiguous characters indicated by the first and last characters separated by a hyphen. If the first and last characters are the same, then the hyphen and last character may be omitted. For instance
{{{
<ProblemCharacterFilter> {
  accept in \ , \,, \\
}
}}}
Note that space, new line, comma and backslash must all be escaped when used with the "in" keyword. This may be an opportune time to point out that Grin is very liberal with respect to whitespace; the following script is identical to `<ProblemCharacterFilter>`
{{{
<ProblemCharacterFilterFormatted> 
  {
    accept
      in
        \     ,
        \,    ,
        \\
  }
}}}
Personally, this feels harder to read, but the whole point of presentation is to present it in whatever way feels right to you. It won't affect how Grin interprets the script.

The "accept" keyword has a few other tricks up its sleeve. One in particular is that it is one of the few keywords that can introduce both a statement and a value. Let's examine the following script in detail.
{{{
<OurFirstRealScript> {
  ch = accept not in 1,I,l,0,O,5,S,2,Z,8,B
  publish "accepted a 'ch'."
}
}}}

Let's say I'm secretly offended that the Romans couldn't develop a proper number system and the Arabs couldn't develop a proper alphabet forcing billions of people for thousands of years to mix two different symbol sets with horribly conflicting glyphs and therefore, I refuse, on principle, to accept those characters into my script. Just as an example. Nothing personal to the Romans or Arabs who might be secretly offended that I'm offended. 

So I wrote `<OurFirstRealScript>` to scan in an unoffensive character from the input stream and then publish it to the output stream. The first statement is an assignment, which is just a fancy way of saying we're going to name the result of a value expression. In this case, the value expression we're naming starts with "accept", which as I just hinted can start a statement or a value. The value of an "accept" is the character read in from the input, assuming of course that it passed the filter condition. Our filter condition this time includes the "not" keyword, which reverses the filter. So, in this example, the value of the "accept" is the next character from the input as long as it is not the number one, an uppercase I, a lowercase l, a zero, an uppercase O, etc. 

An assignment "names" the result, so the consumed character in this instance will be named "ch", which is referred to as a variable, much like "x" and "y" were variables in high school algebra. That variable name can be used throughout the rest of the script to refer back to the consumed character, whatever it may have been. In fact, we used it in the "publish" statement. 

Remember that double quotes indicate a dynamic literal. One of the features of a dynamic literal is that variables can be referenced from inside it with single quotes. So, if our input stream was "Unbelievable!", then our "accept" would consume the first character, the U. The variable "ch" would be assigned the value U and the "publish" statement would write "accepted a U" to the output stream. Note that the single quotes and the variable name are replaced with the variable value in the resulting output.

If we wanted to do the same thing with a static literal, we could have written the following script
{{{
<OurFirstReallyClunkyScript> {
  ch = accept not in 1,I,l,0,O,5,S
  publish 'accepted a '
  publish ch
  publish '.'
}
}}}
You might be thinking to yourself, why wouldn't Grin just print out all the values that follow "publish"? And that's a good question. Keep in mind that the following script is completely identical to `<OurFirstReallyClunkyScript>`
{{{
<OurFirstReallyUnreadableClunkyScript> {
  ch = accept not in 1,I,l,0,O,5,S
  publish 'accepted a ' publish ch publish '.'
}
}}}
Remember that whitespace is for the most part a presentation detail. You're free to use whitespace to communicate your ideas in your way without being burdened by the computer's needs. The only exception is when it would be hard to determine the keywords. For instance you couldn't use "publishch" and expect Grin to know when you wanted it to infer a statement and when you wanted an explicit variable name. Instead Grin assumes you always mean a variable name if there's no space.

So, fine, we've seen input, output, and assignment, but we all know the dirty details of programming live in the control structures. Have you ever thought about control structures? Why did anyone ever think that "while" or "until" or "for" imply repetition? Grin is certainly not the first to suggest the use of "repeat" as a keyword, but see if you can tell the difference with Grin's interpretation

{{{
<RepetitionIsFun> {
  repeat accept "su"
}
}}}
We have seen this use of accept indirectly, "accept" followed by a value expression requires that the value match the input before consuming it. So "accept next" meant consume the next character from the input as long as it matches the next character from the input. 

This script will consume the "su" from "sue", the "susu" of "susurrous" and the "sususu" of "sususudio". It will fail if there is no "su" to consume, for instance if the input were "bob". If we wanted to match zero or more instead of one or more, we can use the keyword "could"
{{{
<OptionalRepetitionIsFunToo> {
  could repeat accept "su"
}
}}}
The "could" keyword can be used without "repeat" to indicate any optional statement
{{{
<OptionalStatementsAreJustAsFun> {
  could accept a,b
}
}}}
This script will consume the next character from the input if it is an a or b, but it won't fail if it doesn't match. In a certain sense "could" is a bit like an "if" statement in other languages, it allows for a branch of sorts. The corresponding statement in Grin to "if-else" would be "either-or". 
{{{
<DecisionsDecisions> {
  either accept 'the cake is a lie'
  or abort "GlaDOS loves you"
}
}}}
So, here either the input stream starts with "the cake is a lie" or we'll abort the script with the message "GlaDOS loves you". The "abort" keyword immediately terminates the script execution with the error message corresponding to the value expression following the "abort". Either-or statements are processed in order, and you may have as many or clauses as necessary as long as there is at least one. For instance
{{{
<KindaLikeSwitchCase> {
  either num = <Int>
  or num = <Short>
  or num = <Char>
  or num = <Long>
  or num = <Byte>
  return num
}
}}}
I threw in two new ideas to see if you're still paying attention. The first (technically the last) is the "return" keyword. A script can end with a "return" statement which will pass a value expression back to the caller of the script. The second is that scripts can be called from other scripts. They may be called either as statements or value expressions, and as a value, a script will supply its return value.

So, let's say we call `<KindaLikeSwitchCase>` with the input "!23" where the `<Int>` script was defined as
{{{
<Int> {
  repeat accept 0-9
  return java.lang.Integer.valueOf(match)
}
}}}
Then `<KindaLikeSwitchCase>` will return the int 123. Once again two new features showed up. The easy one is the "match" keyword. It's like "next" in that it's a built in keyword, but where "next" returns the next character, "match" returns the characters consumed from the input by the current script. The more complicated feature is this method call-like value expression "java.lang.Integer.valueOf(match)"

Within Grin this is called an invocation. Invocations are the binding between Grin and the underlying implementation language, which in this case would appear to be Java. How these bindings work is magic specific to each implementation, but every implementation must obey a few fundamental rules. 

First, an invocation is always a qualified identifier with a comma separated argument list enclosed in parentheses. That's a long-winded way of saying that the invocation looks very much like a function call in a procedural language such as C. In particular, it is very unlikely that the underlying implementation will give an object oriented view, so while you might say "obj.toString()" in Java, you'd say "java.lang.Object.toString(obj)" in Grin.

At first this may seem frustrating, but the intention is to give Grin a common binding format that can be used in as many implementation languages as possible. This particular implementation works with every programming language that uses reflection, which is to say, the lion's share of mainstream languages. And it can be adapted to work even where reflection-style indirection is not possible, for instance, with C.

Next, every invocation must return a value. Because invocations are just a binding to the underlying language, this can usually always be pulled off, for instance in Java "void" methods may be wrapped to return "null". And honestly, that's pretty much it. An invocation passes a set of values to the underlying language and returns a value back to the script.

So, we've looked at "either-or", "could", "repeat", "accept", "publish", and "abort" statements. We've seen scripts called from other scripts. There have been a few assignments and an invocation. We learned that values can be static and dynamic literals, "next", "match", variables, invocations, and even other scripts. There are only 3 features left in all of Grin. It's slightly amusing that this "getting started with Grin" can double as the language specification.

But before we dive into those features, let's look at something we've glossed over a bit. Grin is fundamentally built around the idea of failure. An "either-or" statement triggers the "or" when the "either" fails. An "accept" fails when the filter doesn't match the input. A "could" statement ignores failures. Failures in Grin blur the line between Java's "if" and "try-catch" and do it all without conditions.This is one of those things that Grin does perfectly well without. There are no comparison operations in Grin.

Generally speaking there are two ways to generate root failures in Grin, mismatched input during "accept" and a underlying language error during an invocation. Or to put it another way, Grin triggers a failure on either unexpected input or function error. I tried really hard to make the case that this was all the failure we needed. I lost.

Grin has one final way of generating root failures, the "is" keyword. An "is" statement works very similarly to the "accept" statement, so there are two styles, "is" with a value expression or "is in" with a filter, and both of those can have corresponding "not" forms just like you may have expected.

Let's look at the last example with new features now
{{{
alias java.util.Map as Map
<TheRestOfTheStory> {
  either {
    is Map.instanceof(value)
    publish "it's a map"
  } or
    publish "it's not a map"
}
}}}
The first line is very different. Up until now, the only top level element has been a script definition, but now we see that it shares the billing with the "alias" instruction. An "alias" allows a invocation qualified identifier to be given a shorter name, which in this case is shortened from "java.util.Map" to just "Map". You'll see this used in the "is" statement, instead of the longer "java.util.Map.instanceof" we can now use "Map.instanceof".

You'll also notice that the curly braces can show up in more places than just the script start and end. Any set of statements can be wrapped in curly braces to indicate that they are a composite statement. Blocks tend to show up most frequently in "either-or", "should" and "repeat" statements, though they can appear anywhere statements are legal.

Finally the "is". The "is" keyword is tricky, and in general it's use might be a code smell, but it is useful in certain circumstances, so it's best to know about it. There are subtle tricks about "is" with respect to the different value types, but for the most part, "is" fails under two conditions: if the value does not exist, or if it equals the boolean false. In this example, the "is" verifies that the "value" (a variable presumably set from outside the script) is an instance of java.util.Map. If it is, we publish "it's a map", otherwise the "is" statement will fail, control will pass to the "or" statement and we will instead publish "it's not a map".

The "is" statement has an additional useful feature. The state of a Grin script is 3 pieces, the current input position, the current output buffer, and the current environment. Whether an "is" succeeds or fails, the state of all three of these pieces is restored to their original state before the "is" executed. What this means is that there is no impact to the Grin state during an "is" statement, even if input is consumed or output is published or assignments are made. Note that invocations are not rolled back, so there may be side effects in the underlying language model that are outside the control of Grin.

Grin has a few more [AdvancedGrin advanced features], but for the most part, this is everything you need to start Grinning right away. See [GettingStartedWithChessur Chessur] for more information on downloading the reference implementation in Java.