Gleux is a fairly radical departure from the other tools in the Fuwjin suite. In a certain sense it is a fairly radical departure from pretty much any tool, and it may need a bit of justification before presentation.

Pogo has been in development for almost 3 years now, and it has grown into a very useful and mature product. But there have always been two issues that were seemingly insurmountable: the syntax and the attributes.

The Pogo syntax is so sufficiently similar to other parsers and regular expressions that it takes more time to discuss why Pogo doesn't work the way you might expect than to explain how it really works. The attributes are so sufficiently unlike everything else in the programming world, that it seems to defy any decent explanation at all. So Pogo requires an unreasonable level of sophistication just to get a simple grammar together followed by a ridiculous amount of mentoring to pair that grammar with attributes that would make it even marginally useful.

As much as it pains me to say it, Pogo is just not ready for real world applications. This is made even more painful by the fact that November saw a great leap in the redesign of Pogo attributes, finally giving them a chance to be explained and understood. But eliminating the attribute problem served to expose the syntax problem all the more. Pogo pushed the PEG-style syntax to its limit, and it was time for a real change.

Gleux is the spiritual successor to Pogo, a language born from the desire to have a deeper set of string parsing idioms than regular expressions but without the cryptic operators. Ultimately, Gleux is a transformation language, capable of articulating complex exchanges between input and output streams and a set of objects.

If you'd like to start experimenting with the Java implementation of Gleux, check out GettingStartedWithGleux. Perhaps you'd like to see a complete Gleux program, if so, head over to GleuxFormatterInGleux. And if you'd like the guided tour, then the GleuxScreencasts might be just the thing.