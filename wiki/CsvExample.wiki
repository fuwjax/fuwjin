#summary Csv Example project

= CSV sample project =

===[http://code.google.com/p/fuwjin/downloads/detail?name=PogoScreencast1.mov&can=2&q= Screencast 1: Intro to Pogo Grammar]===

Introduces the following Pogo grammar elements:
  * Rule definition
    * if *e* is a parsing expression, *Name <- e* is a rule named "Name"
  * Consuming parsing expressions
    * *.* consumes any single character
    * *'lit'* or *"lit"* consumes a literal sequence of characters
    * *`[`a-z`]`* consumes a character if it is in the range
  * Lookahead parsing expressions
    * if *e* is a parsing expression, *!e* is a negative lookahead
    * if *e* is a parsing expression, *&e* is a positive lookahead
  * Repeating parsing expressions
    * if *e* is a parsing expression, *e?* is an optional expression (zero or one match)
    * if *e* is a parsing expression, *e`*`* is an optionally repeating expression (zero or more matches)
    * if *e* is a parsing expression, *e+* is a required repeating expression (one or more matches)
  * Set parsing expressions
    * if *e1*, *e2*, ... are parsing expressions, *e1 e2...* is a sequence parsing expression

===[http://code.google.com/p/fuwjin/downloads/detail?name=PogoScreencast2.mov&can=2&q= Screencast 2: Rules and Options]===

Introduces the following Pogo grammar elements:
  * Rule reference expression
    * if *Name* is the name of a rule, *Name* is a rule reference expression
  * Set parsing expressions
    * if *e1*, *e2*, ... are parsing expressions, *e1 / e2 / ...* is an option parsing expression
  * Rule attributes
    * if *A* is a category name, then *=A* is a rule category attribute
      * *default* is the default category name
    * if *A* is a zero, one, or two argument function name, then *>A* is a rule match attribute
      * *return* as a rule match attribute returns the rule match
 
===[http://code.google.com/p/fuwjin/downloads/detail?name=PogoScreencast3.mov&can=2&q= Screencast 3: Intro to Pogo Attributes]===

Introduces the following Pogo grammar elements:
  * Rule attributes
    * if *A* is a zero or one argument function name, then *~A* is a rule creation attribute
      * *new* is a function keyword for the constructor
    * if *A* is a zero or one argument function name, then *:A* is a rule result attribute
  * Rule reference attributes
    * if *A* is a zero or one argument function name, then *~A* is a reference creation attribute
      * *new* is a function keyword for the constructor
    * if *A* is a zero, one or two argument function name, then *>A* is a reference match attribute
      * *return* returns the reference match as the rule result
    * if *A* is a zero, one or two argument function name, then *:A* is a reference result attribute
      * *return* returns the reference result as the rule result

===[http://code.google.com/p/fuwjin/downloads/detail?name=PogoScreencast4.mov&can=2&q= Screencast 4: Putting it all together]===

Discusses the following Pogo principles:
  * Zero match expressions can be dangerous, try to always ensure that they are the last option
  * Returning a match tends to be rare, most rules and references will return results
  * To restrict to a subset of characters, use a character class, i.e. *`[`a-zA-Z0-9`]`*
  * To exclude characters from a match, use a negative lookahead, i.e. *!`[`:,.?`]` .*
  * It may be useful to build a custom match with a StringBuilder, especially with escaped characters